
##############################
# NETWORKS & VOLUMES
##############################
networks:
  web:
    name: docker_web
    driver: bridge
  kafkanet:
    driver: bridge

volumes:
  pgdata:
  pgadmin_data:
  zkdata:
  zk-data:
  zk-logs:
  kfkdata:

##############################
# SERVICES
##############################
services:
  # ==========================
  # Infra: PostgreSQL
  # ==========================
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    networks: [web]
    environment:
      POSTGRES_USER: ${LOCAL_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LOCAL_POSTGRES_PASSWORD}
      POSTGRES_DB: ${LOCAL_POSTGRES_DB}
      TZ: Asia/Bangkok
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      # รันครั้งแรกเท่านั้น (init schema ของ auth ถ้ามี)
      - ./backend/authorizationserver/src/main/resources/data/schema.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backend/authorizationserver/src/main/resources/data/seed.sql:/docker-entrypoint-initdb.d/seed.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U "$${POSTGRES_USER}" -d "$${POSTGRES_DB}"']
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # ==========================
  # pgAdmin
  # ==========================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks: [web]
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 6000
      TZ: Asia/Bangkok
    ports:
      - "5050:6000"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # ==========================
  # Infra: Zookeeper
  # ==========================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    restart: unless-stopped
    networks: [kafkanet]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 10
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat,srvr,mntr,conf"
    ports:
      - "2181:2181"
    volumes:
      - zkdata:/var/lib/zookeeper/data
      - zk-data:/var/lib/zookeeper/data
      - zk-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 127.0.0.1 2181 | grep -q imok"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 20s

  # ==========================
  # Infra: Kafka (single-broker dev)
  # ==========================
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    networks: [kafkanet, web]
    environment:
      KAFKA_EXTERNAL_IP: "18.142.185.25"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # 2 listeners: external (9092) + internal (29092)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_EXTERNAL_IP:-127.0.0.1}:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "9092:9092"  # ทดสอบจาก host ภายนอก; ภายใน container ใช้ kafka:29092
    volumes:
      - kfkdata:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s

  # ==========================
  # Infra: Kafdrop (Kafka UI)
  # ==========================
  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    container_name: kafdrop
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    networks: [kafkanet, web]
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms32M -Xmx64M"
    ports:
      - "9000:9000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9000 | grep -q '<title>Kafdrop'"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s

  # ==========================
  # Discovery Service (Eureka)
  # ==========================
  discoveryservice:
    build:
      context: ../backend/discoveryserver
      dockerfile: Dockerfile
    container_name: discoveryservice
    restart: unless-stopped
    networks: [web]
    ports:
      - "5002:5002"
    environment:
      SERVER_PORT: "5002"
      SPRING_PROFILES_ACTIVE: "dev"
      USER_NAME: "admin"
      PASSWORD: "letmein"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5002/actuator/health | grep -q '\"status\":\"UP\"' && curl -fsS http://$${USER_NAME}:$${PASSWORD}@localhost:5002/eureka/apps >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s

  # ==========================
  # Authorization Server
  # ==========================
  authorizationserver:
    build:
      context: ../backend/authorizationserver
      dockerfile: Dockerfile
    container_name: authorizationserver
    restart: unless-stopped
    depends_on:
      discoveryservice:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks: [web]
    ports:
      - "9001:9001"
    environment:
      SERVER_PORT: "9001"
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_APPLICATION_NAME: "authorizationserver"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://admin:letmein@discoveryservice:5002/eureka/"

      # IMPORTANT: ใช้ค่าเดียวกับที่ Gateway ตรวจ (ตอนนี้ใช้ IP ภายนอกผ่าน path /authorization)
      ISSUER_URI: "http://18.142.185.25:8080/authorization"

      # DB ของ Auth
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_DB: "${LOCAL_POSTGRES_DB}"
      POSTGRES_USERNAME: "${LOCAL_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${LOCAL_POSTGRES_PASSWORD}"
      TZ: Asia/Bangkok
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9001/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s

  # ==========================
  # User Service
  # ==========================
  userservice:
    build:
      context: ../backend/userservice
      dockerfile: Dockerfile
    container_name: userservice
    restart: unless-stopped
    depends_on:
      discoveryservice:
        condition: service_healthy
      authorizationserver:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks: [web]
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8085"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://admin:letmein@discoveryservice:5002/eureka/"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://18.142.185.25:8080/authorization"
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_DB: "${LOCAL_POSTGRES_DB}"
      POSTGRES_USERNAME: "${LOCAL_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${LOCAL_POSTGRES_PASSWORD}"
      KAFKA_SERVER_URL: "kafka:29092"
      UI_APP_URL: "http://18.142.185.25:3001"
      JWKS_URI: "http://18.142.185.25:8080/authorization/oauth2/jwks"
      TZ: Asia/Bangkok

    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8085/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  # ==========================
  # Ticket Service
  # ==========================
  ticketservice:
    build:
      context: ../backend/ticketservice
      dockerfile: Dockerfile
    container_name: ticketservice
    restart: unless-stopped
    depends_on:
      discoveryservice:
        condition: service_healthy
      authorizationserver:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks: [web]
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://admin:letmein@discoveryservice:5002/eureka/"
      # สำคัญ: ให้ตรงกับ ISSUER_URI ของ auth (ข้างบน)
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://18.142.185.25:8080/authorization"
      # DB
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_DB: "${LOCAL_POSTGRES_DB}"
      POSTGRES_USERNAME: "${LOCAL_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${LOCAL_POSTGRES_PASSWORD}"
      # Kafka
      KAFKA_SERVER_URL: "kafka:29092"
      TZ: Asia/Bangkok
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8086/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  # ==========================
  # Notification Service (Kafka consumer)
  # ==========================
  notificationservice:
    build:
      context: ../backend/notificationservice
      dockerfile: Dockerfile
    container_name: notificationservice
    restart: unless-stopped
    depends_on:
      discoveryservice:
        condition: service_healthy
      authorizationserver:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks: [web]
    ports:
      - "9013:9013"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "9013"
      SPRING_APPLICATION_NAME: "notificationservice"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://admin:letmein@discoveryservice:5002/eureka/"
      # สำคัญ: ให้ตรงกับ ISSUER_URI ของ auth (ข้างบน)
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://18.142.185.25:8080/authorization"
      # Kafka
      KAFKA_SERVER_URL: "kafka:29092"
      NOTIFICATION_TOPIC: "NOTIFICATION_TOPIC"
      # DB (ถ้าใช้)
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: "5432"
      POSTGRES_DB: "${LOCAL_POSTGRES_DB}"
      POSTGRES_USERNAME: "${LOCAL_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${LOCAL_POSTGRES_PASSWORD}"
      TZ: Asia/Bangkok
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9013/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  # ==========================
  # API Gateway
  # ==========================
  gateway:
    build:
      context: ../backend/gateway
      dockerfile: Dockerfile
    container_name: gateway
    restart: unless-stopped
    depends_on:
      discoveryservice:
        condition: service_healthy
      authorizationserver:
        condition: service_healthy
      userservice:
        condition: service_healthy
      ticketservice:
        condition: service_healthy
    networks: [web]
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SERVER_PORT: "8080"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://admin:letmein@discoveryservice:5002/eureka/"
      # IMPORTANT: ใช้ค่าเดียวกับที่ Gateway ตรวจ (ตอนนี้ใช้ IP ภายนอกผ่าน path /authorization)
      ISSUER_URI: "http://18.142.185.25:8080/authorization"
      # สำคัญ: ให้ตรงกับ ISSUER_URI ของ auth (ข้างบน)
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: "http://18.142.185.25:8080/authorization"
      TZ: Asia/Bangkok
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  # ==========================
  # Frontend SSR (Angular)
  # ==========================
  frontend-ssr:
    build:
      context: ../frontend/frontend-gaming-master-public
      dockerfile: Dockerfile
    container_name: frontend-ssr
    restart: always
    networks: [web]
    ports:
      - "4000:4000"

  # ==========================
  # Frontend Internal (Static SPA)
  # ==========================
  frontend-internal:
    build:
      context: ../frontend/frontend-gaming-master-internal
      dockerfile: Dockerfile
    container_name: frontend-internal
    restart: always
    networks: [web]
    ports:
      - "5000:80"   # http://<IP>:5000/admin/

  # ==========================
  # Ticket App (SPA)
  # ==========================
  ticketapp:
    build:
      context: ../frontend/ticketapp
      dockerfile: Dockerfile
      args:
        CONFIG: production
    container_name: ticketapp
    restart: unless-stopped
    networks: [web]
    ports:
      - "3001:80"
      - "3003:3003"

  # ==========================
  # RTMP Live Stream Server
  # ==========================
  backend-live-api:
    build:
      context: ../backend/backend-gaming-master-live-api
      dockerfile: Dockerfile
    container_name: backend-live-api
    restart: always
    networks: [web]
    ports:
      - "1935:1935"
      - "8082:8080"
      - "3000:3000"

  # ==========================
  # Nginx Reverse Proxy
  # ==========================
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    networks: [web]
    depends_on:
      - frontend-ssr
      - frontend-internal
    ports:
      - "80:80"
    volumes:
      - ./nginx/sites-available:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
